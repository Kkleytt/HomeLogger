# server/consumer/consumer.py
# –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Ö –≤ –¥–æ—á–µ—Ä–Ω–∏–µ –º–æ–¥—É–ª–∏

import asyncio
import json
import aio_pika
from typing import Optional
from contextlib import suppress

from server.rabbitmq.validation import validate_message
from server.modules.write_to_database import Writer as DatabaseWriter
from server.modules.write_to_console import Writer as ConsoleWriter
from server.modules.write_to_files import Writer as FilesWriter
from server.config.schema import ServerConfig
from server.config.config import ConfigManager as cfg


class RabbitMQConsumer:
    def __init__(self):
        """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
        """
        
        self.config: ServerConfig = cfg.config                                  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        
        self.connection: Optional[aio_pika.RobustConnection] = None             # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ
        self.channel: Optional[aio_pika.RobustChannel] = None                   # –ö–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RabbitMQ
        self.queue: Optional[aio_pika.RobustQueue] = None                       # –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.service_queue: Optional[aio_pika.RobustQueue] = None               # –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–µ—Ä–≤–∏—Å–Ω—ã—Ö)
        self.consumer_tag: Optional[str] = None                                 # –¢–µ–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.service_tag: Optional[str] = None                                  # –¢–µ–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–µ—Ä–≤–∏—Å–Ω—ã—Ö)
        self._running = False                                                   # –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è
        self._restart_requested = False                                         # –°—Ç–∞—Ç—É—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è
        self._lock = asyncio.Lock()                                             # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safe –æ–ø–µ—Ä–∞—Ü–∏–π

        self._console_client: Optional[ConsoleWriter] = None                    # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
        self._database_client: Optional[DatabaseWriter] = None                  # –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ –ë–î
        self._files_client: Optional[FilesWriter] = None                        # –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª—ã

    async def _init_clients(self) -> bool:
        """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤

        Returns:
            bool -- –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """

        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
            if self._files_client:
                await self._files_client.close_all()

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ
            if self.config.console.enabled:
                self._console_client = ConsoleWriter(cfg.config.console)
            else:
                self._console_client = None

            if self.config.timescaledb.enabled:
                self._database_client = DatabaseWriter(self.config.timescaledb)
            else:
                self._database_client = None

            if self.config.files.enabled:
                self._files_client = FilesWriter(self.config.files)
            else:
                self._files_client = None
                
            return True
        except Exception as e:
            print("Error initializing clients:", e)
            return False

    async def _distribution_message(self, message: aio_pika.IncomingMessage):
        """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏

        Arguments:
            message {aio_pika.IncomingMessage} -- –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        """
        
        async with message.process():
            try:
                dict_message: dict = json.loads(message.body.decode())
                result_validation = await validate_message(dict_message)
                if not result_validation:
                    print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    return

                if self.config.timescaledb.enabled and self._database_client:
                    await self._database_client.write_log(log=dict_message)

                if self.config.console.enabled and self._console_client:
                    await self._console_client.print_log(dict_message)

                if self.config.files.enabled and self._files_client:
                    await self._files_client.write_log(dict_message)

            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message.body.decode()[:100]}...")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _distribution_service_message(self, message: aio_pika.IncomingMessage):
        """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        Arguments:
            message {aio_pika.IncomingMessage} -- –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        """
        
        async with message.process():
            try:
                dict_message: dict = json.loads(message.body.decode())
                if dict_message.get("code") == 100 or dict_message.get("detail") == "Update config":
                    print("üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                    self._restart_requested = True
                    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
                    self._running = False
            except Exception as e:
                print(f"Error processing service message: {e}")

    async def _connect(self) -> bool:
        """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ

        Returns:
            bool -- –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        
        try:
            config = self.config.rabbitmq
            url = f"amqp://{config.username}:{config.password}@{config.host}:{config.port}/"
            
            self.connection = await aio_pika.connect_robust(url) # type: ignore
            self.channel = await self.connection.channel() # type: ignore
            self.queue = await self.channel.declare_queue( # type: ignore
                config.queue,
                durable=True,
                auto_delete=False,
                arguments={"x-message-ttl": 30000}
            )
            self.service_queue = await self.channel.declare_queue( # type: ignore
                "service_queue",
                durable=True,
                auto_delete=False,
                arguments={"x-message-ttl": 30000}
            )

            self.consumer_tag = await self.queue.consume(self._distribution_message) # type: ignore
            self.service_tag = await self.service_queue.consume(self._distribution_service_message) # type: ignore
            
            return True
        except Exception as e:
            print("Error connecting to RabbitMQ:", e)
            return False

    async def start(self) -> bool:
        """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è

        Raises:
            e: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è

        Returns:
            bool -- –°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è
        """
        
        try:
            await self._init_clients()
            await self._connect()
            self._running = True
            self._restart_requested = False
            
            return True
        except Exception as e:
            print("Error in start consumer:", e)
            self._running = False
            raise e

    async def stop(self) -> bool:
        try:
            if self.consumer_tag and self.queue:
                with suppress(Exception):
                    await self.queue.cancel(self.consumer_tag)
                    
            if self.service_tag and self.service_queue:
                with suppress(Exception):
                    await self.service_queue.cancel(self.service_tag)
                    
            if self.channel:
                with suppress(Exception):
                    await self.channel.close()
                    
            if self.connection:
                with suppress(Exception):
                    await self.connection.close()
                    
            if self._files_client:
                with suppress(Exception):
                    await self._files_client.close_all()
            self._running = False
            print("Consumer stop.")
            
            return True
        except Exception as e:
            print("Error in stop consumer:", e)
            return False

    async def restart(self) -> bool:
        """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è

        Returns:
            bool -- –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è
        """
        
        try:
            print("Update config...")
            await self.stop()
            self.config = cfg.config
            await self.start()
            print("Update config complete.")
            
            return True
        except Exception as e:
            print("Error in update config:", e)
            return False

    async def run_forever(self) -> None:
        """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        
        await self.start()
        try:
            while True:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
                while self._running:
                    await asyncio.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                if self._restart_requested:
                    await self.restart()
                else:
                    break
        except asyncio.CancelledError:
            print("   -> –ó–∞–¥–∞—á–∞ Consumer –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        finally:
            if not self._restart_requested:
                await self.stop()
                
                
if __name__ == "__main__":
    consumer = RabbitMQConsumer()
    asyncio.run(consumer.run_forever())
    